@model ORDER_MANAGEMENT.Data.DistributorDetails
@{
    ViewBag.Title = "Update";
    Layout = "~/Views/Shared/_AdminLayoutPage.cshtml";
}

<section class="section team-section p-4">
    <div class="container">
        @using (Html.BeginForm())
        {
            @Html.HiddenFor(model => model.DistributorID)
            @Html.AntiForgeryToken()

            <div class="card card-cascade cascading-admin-card">
                <div class="admin-up d-flex justify-content-start">
                    <div class="z-depth-1-half mr-2">
                        @{
                            var imgSrc = "";
                            if (Model.Photo != null)
                            {
                                imgSrc = String.Format("data:image/gif;base64,{0}", Convert.ToBase64String(Model.Photo));
                            }
                            else
                            {
                                imgSrc = "/CSS/image/DefaultImage.jpg";
                            }
                        }

                        <img src="@imgSrc" style="height:100px; width:95px" />
                    </div>
                    <div class="data">
                        <h5 class="font-weight-bold dark-grey-text">
                            Update - <span class="text-muted"> @Model.Name</span>
                        </h5>
                    </div>
                </div>
                <div class="card-body card-body-cascade">
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="md-form form-sm mb-0">
                                @Html.TextBoxFor(m => m.DueRangeLimit, new { @class = "form-control form-control-sm", min = 1 })
                                @Html.ValidationMessageFor(m => m.DueRangeLimit, "", new { @class = "text-danger" })
                                <label for="DueRangeLimit">Due Range</label>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="md-form form-sm mb-0">
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                <label for="Name">Name</label>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-lg-4">
                            <div class="md-form form-sm mb-0">
                                @Html.EditorFor(model => model.FatherName, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                @Html.ValidationMessageFor(model => model.FatherName, "", new { @class = "text-danger" })
                                <label for="FatherName">Father's Name</label>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="md-form form-sm mb-0">
                                @Html.EditorFor(model => model.MotherName, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                @Html.ValidationMessageFor(model => model.MotherName, "", new { @class = "text-danger" })
                                <label for="MotherName">Mother's Name</label>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="md-form form-sm mb-0">
                                @Html.EditorFor(model => model.NID, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                @Html.ValidationMessageFor(model => model.NID, "", new { @class = "text-danger" })
                                <label for="NID">NID</label>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="md-form form-sm mb-0">
                                @Html.EditorFor(model => model.PresentAddress, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                @Html.ValidationMessageFor(model => model.PresentAddress, "", new { @class = "text-danger" })
                                <label for="PresentAddress">Present Address</label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="md-form form-sm mb-0">
                                @Html.EditorFor(model => model.PermanentAddress, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                @Html.ValidationMessageFor(model => model.PermanentAddress, "", new { @class = "text-danger" })
                                <label for="PermanentAddress">Permanent Address</label>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-lg-4 col-md-12">
                            <div class="md-form form-sm mb-0">
                                @Html.EditorFor(model => model.BloodGroup, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                @Html.ValidationMessageFor(model => model.BloodGroup, "", new { @class = "text-danger" })
                                <label for="BloodGroup">Blood Group</label>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-6">
                            <div class="md-form form-sm mb-0">
                                @Html.EditorFor(model => model.PersonalContact, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                @Html.ValidationMessageFor(model => model.PersonalContact, "", new { @class = "text-danger" })
                                <label for="PersonalContact">Personal Contact</label>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-6">
                            <div class="md-form form-sm mb-0">
                                @Html.EditorFor(model => model.EmergencyContact, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                @Html.ValidationMessageFor(model => model.EmergencyContact, "", new { @class = "text-danger" })
                                <label for="EmergencyContact">Emergency Contact</label>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-lg-4 col-md-12">
                            <div class="md-form form-sm mb-0">
                                @Html.EditorFor(model => model.OfficeEmail, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                @Html.ValidationMessageFor(model => model.OfficeEmail, "", new { @class = "text-danger" })
                                <label for="OfficeEmail" class="">Office Email</label>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-12">
                            <div class="md-form form-sm mb-0">
                                @Html.EditorFor(model => model.PersonalEmail, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                @Html.ValidationMessageFor(model => model.PersonalEmail, "", new { @class = "text-danger" })
                                <label for="PersonalEmail">Personal Email</label>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-12">
                            <div class="md-form form-sm mb-0">
                                @Html.Hidden("Photo")
                                <div class="file-field">
                                    <div class="btn aqua-gradient btn-rounded btn-sm float-left">
                                        <span><i class="fas fa-upload mr-2" aria-hidden="true"></i>Choose file</span>
                                        <input type="file" id="upload" value="Choose a Image" onchange="clearImage(this)">
                                    </div>
                                    <div class="file-path-wrapper">
                                        <input class="file-path validate" type="text" placeholder="Upload your file">
                                    </div>
                                </div>
                                <div id="upload-demo" style="display:none;"></div>
                                <img id="prevImage" />
                                <a id="doneButton" class="btn-floating btn-lg blue-gradient" style="display:none;"><i class="fas fa-crop-alt"></i></a>
                            </div>
                        </div>
                    </div>

                    <input type="submit" value="Update" class="btn aqua-gradient" />
                </div>
            </div>
        }
    </div>
</section>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(function () {
            $('input[type="file"]').change(function (e) {
                var $this = $(e.target);
                var $fileField = $this.closest('.file-field');
                var $pathInput = $fileField.find('input.file-path');
                var fileNames = [];

                fileNames.push(e.target.files[0].name);

                $pathInput.val(fileNames.join(', '));
                $pathInput.trigger('change');
            });

            ////...........
            $('#Photo').val('');
            $uploadCrop = $('#upload-demo').croppie(opt);

            $('#upload').on('change', function () {
                readFile(this);
            });

            $('#doneButton').on('click', function () {
                $uploadCrop.croppie('result', { type: 'base64' }).then(function (res) {
                    $('#Photo').val(res.split(',')[1]);
                    $('#upload-demo').hide();
                    $('#doneButton').hide();
                    $('#prevImage').attr('src', res).addClass('img-thumbnail rounded-circle');;
                });
            });
        });

        var $uploadCrop,
            opt = {
                viewport: { width: 150, height: 150 },
                boundary: { width: 180, height: 180 },
                showZoomer: false,
                enableResize: true,
                enableOrientation: true
            };

        function readFile(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    $uploadCrop.croppie('bind', { url: e.target.result });

                    $('#Photo').val('');
                    $('#upload-demo').show();
                    $('#doneButton').show();
                    $('#prevImage').attr('src', '').removeClass('img-thumbnail rounded-circle');
                }
                reader.readAsDataURL(input.files[0]);
            }
        }

        function clearImage(ctrl) {
            if ($(ctrl).val() == "") {
                $('#upload-demo').croppie('destroy');
                $uploadCrop = $('#upload-demo').croppie(opt);
            }
        }
    </script>
}

