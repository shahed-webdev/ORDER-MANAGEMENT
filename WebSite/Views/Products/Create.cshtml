@model ORDER_MANAGEMENT.Data.ProductVM

@{
    ViewBag.Title = "Add Product";
    Layout = "~/Views/Shared/_AdminLayoutPage.cshtml";
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container">
        <div class="card">
            <div class="card-body">
                <h3 class="mb-3">Add Product</h3>

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    <label>Product Category</label>
                    @Html.DropDownList("ProductCategoryID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ProductCategoryID, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <label>Product Name</label>
                    @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <label>Product Code</label>
                    @Html.EditorFor(model => model.ProductCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProductCode, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <label>SKU</label>
                    @Html.EditorFor(model => model.SKU, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SKU, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <label>Size</label>
                    @Html.EditorFor(model => model.Size, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Size, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <label>MRP</label>
                    @Html.EditorFor(model => model.MRP, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MRP, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <label>Description</label>
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>

                <div class="form-group mb-0">
                    @Html.Hidden("ProductImage")
                    <input type="file" id="upload" value="Choose a Image" onchange="clearImage(this)" />
                    <div id="upload-demo" style="display:none;"></div>
                </div>

                <img id="prevImage" src=""/>
                <input id="doneButton" type="button" value="Done" class="btn btn-floating" style="display:none;"/>

                <div class="form-group">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
                @Html.ActionLink("Back to List", "Index")
            </div>
        </div>
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

  <script>
      var $uploadCrop,
          opt = {
          viewport: { width: 200, height: 200 },
          boundary: { width: 250, height: 250 },
          showZoomer: false,
          enableResize: true,
          enableOrientation: true
      };

      $(function () {
          $uploadCrop = $('#upload-demo').croppie(opt);

          $('#upload').on('change', function () {
              readFile(this);
          });

          $('#doneButton').on('click', function () {
              $uploadCrop.croppie('result', { type: 'base64' }).then(function (res) {
                  $('#ProductImage').val(res.split(',')[1]);
                  $('#upload-demo').hide();
                  $('#doneButton').hide();
                  $('#prevImage').attr('src', res);
              });
          });
      });



      function readFile(input) {
          if (input.files && input.files[0]) {
              var reader = new FileReader();

              reader.onload = function (e) {
                  $uploadCrop.croppie('bind', { url: e.target.result});

                  $('#ProductImage').val('');
                  $('#upload-demo').show();
                  $('#doneButton').show();
                  $('#prevImage').attr('src', '');
              }
              reader.readAsDataURL(input.files[0]);
          }
      }

      function clearImage(ctrl) {
          if ($(ctrl).val() == "") {
              $('#upload-demo').croppie('destroy');
              $uploadCrop = $('#upload-demo').croppie(opt);
          }
      }
  </script>
}




